

dokku config node-js-simple

dokku config:set node-js-simple NODE_ENV=development


node-simple app :

https://github.com/alexanderbeletsky/node-simple


———


DOKKU VM :


based mainly on :


https://github.com/progrium/dokku

http://beletsky.net/2013/09/playing-with-dokku-on-vagrant.html

https://help.github.com/articles/generating-ssh-keys

http://progrium.com/blog/2013/06/19/dokku-the-smallest-paas-implementation-youve-ever-seen/

http://nerderati.com/2011/03/17/simplify-your-life-with-an-ssh-config-file/



In the main directory you have:

The vagrant files
Dokku’s files
puppet’s files

Vagrantfile inits the whole installation (ubuntu VM with git, docker, dokku and puppet)

// Todo : change variable "raring" to "trusty”, with dependencies.
//BOX_NAME = ENV["BOX_NAME"] || "raring"
//BOX_URI = ENV["BOX_URI"] || "https://cloud-images.ubuntu.com/vagrant/trusty/current/trusty-server-cloudimg-amd64-vagrant-disk1.box"



0. Cloning the dokku repo

> git clone git@github.com:progrium/dokku.git
> cd dokku

1. Local Networking : Handy for testing

› sudo nano /private/etc/hosts

and add :

10.0.0.2        dokku.me
10.0.0.2        node-simple.dokku.me

// VM of vagrant is by default assign to 10.0.0.2

2. Fire up the virtual machine : You have to be in the Vagrantfile directory

> vagrant up


3. Upload your ssh key to Dokku server, so you will be to git push code there.


> cat ~/.ssh/id_rsa.pub | vagrant ssh -- sudo sshcommand acl-add dokku computer1


//> alias dokku="ssh -t dokku@<ip-of-your-instance>" // more convenient
// cat ~/.ssh/id_rsa.pub | ssh root@{{server ip address}} "sudo sshcommand acl-add dokku {{key name/descriptor}}"
// User is “dokku”, description is “computer1”
//sshcommand acl-add <user> <ssh-key-name>
// to get public key hash and compare to github by example, enter : > ssh-keygen -l -f id_rsa.pub


4. Test if everything is fine

> vagrant ssh
> docker -v


4. bis : If we have re-install dokku and changer key, don’t forget to first delete entry in client know host : “Offending key in…”

//ssh-keygen -R <nom_du serveur_SSH>
> ssh-keygen -R dokku.me


5. Deploy to Dokku

// In tuto : > git remote add local-deploy git@dokku.me:node-simple
// Go in your app directory and then “git remote add {{dokku remote name}} dokku@{{server ip address}}:{{application name}}”

//You can now see your application’s url by typing:
// “dokku url {{application name}}”

> cd node-simple
> git remote add local-deploy dokku@dokku.me:node-simple
> git push local-deploy master


example output :

-----> Deploying node-simple ...
=====> Application deployed:
       http://dokku.me:49153

To dokku@dokku.me:node-simple
 * [new branch]      master -> master


**. Install puppet

add that to the vagrant file :

    config.vm.provision :puppet do |puppet|
        puppet.manifests_path = "puppet/manifests"
        puppet.module_path = "puppet/modules"
        puppet.options = ['--verbose']
    end
**


6. Install puppet module

Methode 1 : Unpack the Tarball to continious-deployment-demo/puppet/modules and rename it to the module name which defined in manifests/init.pp (you can use “head” command on the init.pp file to verify)

Then include it into the file:

continious-deployment-demo/puppet/manifests/default.pp


They are various modules here :

https://github.com/puppetlabs/

and here :

https://github.com/example42/puppet-modules



———————————


JENKINS VM


Set up a new VM with a base vagrant ubuntu trusty file.

Clone puppet directory


1. Add Jenkins to puppet


Download tar file here : https://forge.puppetlabs.com/rtyler/jenkins
Add it like explained before

/!\ Don’t forget to add the dependancies /!\  : so add

https://forge.puppetlabs.com/darin/zypprepo  module.

Java module is already installed.


2. Vagrant networking :

  config.vm.network :forwarded_port, guest: 8080, host: 2000
  config.vm.network :"private_network", ip: "10.0.0.3”,


Guest Machine : the virtual one
Host : the real
So we add “config.vm.network :forwarded_port, guest: 8080, host: 2000” in the Vagrantfile to access jenkins (port 8080 on the guest) via port 2000 on the host machine.


3. Start jenkins  (Normally automatically done) :


sudo /etc/init.d/jenkins start

and

sudo /etc/init.d/jenkins stop to stop it




4. Random error when vagrant provision :


If error message with provisioning :

fatal error: runtime: cannot allocate heap metadata
runtime: panic before malloc heap initialized
fatal error: runtime: cannot allocate heap metadata
make: *** [stack] Error 2

then

vagrant ssh and then in sudo :

> dd if=/dev/zero of=/swapfile bs=1024 count=1024000
> mkswap /swapfile
> swapon /swapfile

Reason : 512MB droplet is not big enough. Problem solved by adding a swapfile

OR

set vagrant virtual box memory to 1024


like explained at : http://blog.42quirks.com/install-dokku-on-amazon-ec2-ubuntu-12-04/




5. Change dokku/puppet/modules/jenkins/manifests/plugins.pp file to automatically install git jenkins plug in

List of plug in :

http://updates.jenkins-ci.org/download/plugins/


Example, add that to install git plug in:

  jenkins::plugin { "promoted-builds" : }
  jenkins::plugin { "ssh-credentials" : }
  jenkins::plugin { "credentials" : }
  jenkins::plugin { "git-client" : }
  jenkins::plugin { "multiple-scms" : }
  jenkins::plugin { "scm-api" : }
  jenkins::plugin { "token-macro" : }
  jenkins::plugin { "parameterized-trigger" : }
  jenkins::plugin { "ssh-agent" : }
  jenkins::plugin { "github-api" : }
  jenkins::plugin { "github" : }
  jenkins::plugin { "git" : }

  jenkins::plugin { "nodejs" : }

  jenkins::plugin { "ssh-slaves" : }
  jenkins::plugin { "docker-plugin" : }


https://forge.puppetlabs.com/rtyler/jenkins


/!\ Don’t forget the dependancies /!\
http://csfreebird.blogspot.be/2012/08/installing-jenkins-plugin-manually.html


/!\ ASCII /!\
" is not the same then “




6. Launch a new job in jenkins


go to “new job”, set a name, select git
Provide the path of GitHub repository under “GitHub Project” : http://…., sans .git
provide “repository URL” for “GIT” under “Source Code Management”. : git://github… .git

select option for “What trigger the build” : “Build when a change is pushed to GitHub”
set before build?  Nothing for now
action after build? Nothing for now

Now, we have configured Jenkins job in such a way that whenever a change is committed to GitHub repository - this will trigger build process on Jenkins.


repository url : 
// no parameters => .git ?


12 bis

///////// Configure git credentials; in the guest machine run :

> ssh-keygen -t rsa -C "label"

we don’t need passphrase (Do we?)

Passphrase : used to crypt private key for better security
No way to someone else to access VM


It generates a private/public key pair

Then put your public key on github; and put your private key on Jenkins

Then 

> ssh -T git@github.com

/////////// to add key fingerprint to known host

Just take the same key pair then before ! So just add existing host private key to jenkins



13

Github can’t trigger Jenkins if this one is run locally


Instead we’ll ask jenkins to pull frequently github —> Cron like : “build periodically” option with by example as planning “*/2 * * * *”


or just manual launch



14


Fichier Hello.java sur git


script shell jenkins :

javac Hello.java;
java Hello


15. Post build options


I believe you can just add two git repositories under the "source code management" section, and then specify that you want to build REPOLOCALNAME/branch, and then at the end under 'Git publisher' specify you want to merge and push to the remote branch. (ie. BranchToPush=branchname and TargetRemoteName= REMOTEREPONAME)

*Remember, the names are specified under advanced options of the repository when you add it under the SCM section.

—

So, add a second repository url : 

dokku@dokku.me:node-simple

with the same credentials then the first repo

Then, set a name, by example : remoterepo.

Also, set a name for the first repo : origin.

Under “Branches to build”, puts “origin/master”

Then, choose post build option “git publisher”

branch to push : master



For the example the first repo is a fork of node-simple


——

http://programmaticponderings.wordpress.com/2013/11/13/building-a-deployment-pipeline-using-git-maven-jenkins-and-glassfish-part-2-of-2/


BUT Don’t choose the Merge option!!!!


just a post-it :

Use the git remote rm command to remove a remote URL from your repository.

> git remote -v
> git remote rm destination


—


Very CI&CD interesting articles :

http://jenkins-le-guide-complet.batmat.cloudbees.net/html/book.html

http://jenkins-le-guide-complet.batmat.cloudbees.net/html/chapter-security.html

http://www.methodsandtools.com/archive/archive.php?id=121

http://catalyst-zero.com/release-your-app/

http://www.kaczanowscy.pl/tomek/2012-07/jenkins-plugins-part-iii-towards-continuous-delivery

http://www.agitech.co.uk/implementing-a-deployment-pipeline-with-jenkins/

http://www.agitech.co.uk/deployment-pipelines-with-jenkins-puppet-and-jbehave/

http://www.infoq.com/articles/orch-pipelines-jenkins

http://thediscoblog.com/blog/2014/01/24/continuous-delivery-for-heroku-with-jenkins/

http://www.carbonsilk.com/node/deploying-nodejs-apps/


———




Jenkins “Docker plug in” : DOESN’T WORK!



Goto Jenkins Configuration page by clicking on Manage menu or browsing to the URL http://localhost:8080/configure

Scroll down to Cloud Section

Click on the `Add a new cloud` pop-up menu button which should have an option - docker



Docker image:

- Basic docker jenkins slave (image) :

https://registry.hub.docker.com/u/evarga/jenkins-slave/dockerfile



- Public docker images:

https://github.com/docker/docker/wiki/Public-docker-images




> sudo docker pull evarga/jenkins-slave
> sudo docker images
> sudo docker ps -a

> sudo docker run -P -d evarga/jenkins-slave


Thanks to the -P option used in the run command, all the exposed ports are mapped automatically. So if you go to yourDockerHost:49154 with a web browser, you’ll have the running Nuxeo instance.


or


> sudo docker run -d -p 0.0.0.0:2222:22 -t -i evarga/jenkins-slave

-d means in background

> ssh jenkins@localhost -p 2222




If your host needs to allow connections from a jenkins instance hosted on a different machine, you will need to open up the TCP port. This can be achieved by editing /etc/init/docker.conf, and setting (for example) 



> vagrant ssh
> sudo nano /etc/default/docker

then add :

DOCKER_OPTS="-H 127.0.0.1:4243 -H unix:///var/run/docker.sock"

or if remote :

DOCKER_OPTS="-H 0.0.0.0:4243 -H unix:///var/run/docker.sock"

then


sudo service docker restart



Then go to jenkins, and make a test connection to http://localhost:4243



—————

If we want to connect to a container (with sshd installed) :

> sudo docker inspect 013d47357d20 | grep IP
> sudo ssh jenkins@172.17.0.42

—————



http://www.centos.org/docs/5/html/5.2/Deployment_Guide/s3-openssh-rsa-keys-v2.html

http://varmenise.tumblr.com/post/87976165063/docker-on-centos-jenkins




————


For testing, disable the fingerprint authentification :


Add the following lines to the beginning of /etc/ssh/ssh_config, server side :


Host *
   StrictHostKeyChecking no
   UserKnownHostsFile=/dev/null


Options:

The Host subnet can be * to allow unrestricted access to all IPs.
Edit /etc/ssh/ssh_config for global configuration or ~/.ssh/config for user-specific configuration.



—————

Instead of all these manual commands, I’ve a Dockerfile that automatically configure ubuntu for the ssh key config. 

see sirris_docker_ssh folder in continious-deployment-demo


—————





Docker command to delete matching containers :

// To not use sudo be sure to add jenkins user to docker group :
// > sudo gpasswd -a ${USER} docker // with user = vagrant or jenkins
// > sudo service docker restart

> docker ps -a | grep 'weeks ago' | awk '{print $1}' | xargs docker rm -f




———


GRAYLOG CONFIG : New VM


https://github.com/hggh/graylog2-vagrant


> git clone --recursive https://github.com/hggh/graylog2-vagrant.git
> cd graylog2-vagrant
> vagrant up
> vagrant reload --provision  # because puppet needs to run twice to create GELF inputs
> vagrant ssh

http://localhost:9000/

Username: admin
Password: yourpassword

cronjob runs every minute to push sample data into Graylog2


Add 

config.vm.network :"private_network", ip: "10.0.0.4"

to vagrant file

—

Then, in the source machine

…First add rsyslog module to puppet… then


> sudo nano /etc/rsyslog.conf
 
Add this line :

*.* @<ip-server-graylog2>:1514

then 

> /etc/init.d/rsyslog restart
> sudo service rsyslog status (to verify)

————




JENKINS CONFIG (steven) :

based on

http://www.activestate.com/blog/2014/01/using-docker-run-ruby-rspec-ci-jenkins

https://zapier.com/engineering/continuous-integration-jenkins-docker-github/

http://www.centurylinklabs.com/15-quick-docker-tips/

https://blog.codecentric.de/en/2014/02/docker-registry-run-private-docker-image-repository/

http://sametmax.com/le-deploiement-par-conteneurs-avec-docker/

https://blog.codecentric.de/en/2014/02/docker-registry-run-private-docker-image-repository/



1. Install docker on jenkins VM :

by adding :

    config.vm.provision "docker" do |d|
    	#d.build_image "/vagrant/app"
    end

to Vagrantfile.

then :

> vagrant reload —-provision 



then in shell :

> sudo usermod -a -G docker vagrant
> sudo usermod -a -G docker jenkins
> sudo service docker restart

or

> sudo service docker.io restart

(Todo : Add these commands to puppet)


Now in jenkins interface :


- Create a new job, named by example “docker_build”.
- At “build periodically” you can add : “H 3 * * *”.
- Add a shell script step.
- Copy the followings :

####################################

docker run --name ${JOB_NAME} -d -p 5000:5000 samalba/docker-registry

DOCKERFILE_DIRECTORY=docker

# Fetch Dockerfile
mkdir -p $DOCKERFILE_DIRECTORY
wget https://raw.githubusercontent.com/Nebucom/dockerfile_config/master/Dockerfile --directory-prefix=$DOCKERFILE_DIRECTORY

# Fetch private key
wget https://raw.githubusercontent.com/Nebucom/dockerfile_config/master/id_rsa --directory-prefix=$DOCKERFILE_DIRECTORY

# Fetch public key
wget https://raw.githubusercontent.com/Nebucom/dockerfile_config/master/id_rsa.pub --directory-prefix=$DOCKERFILE_DIRECTORY

# Fetch build_and_push script
wget https://gist.githubusercontent.com/Guessing/526d20ca94ca18370d9a/raw/19d880cd8cce43b0efa7789019020cf05219f0f4/build_and_push.sh
chmod +x build_and_push.sh

# Build the Docker image
DOCKER_REPO_SERVER=localhost:5000 ./build_and_push.sh $DOCKERFILE_DIRECTORY docker_image_name


docker rm -f ${JOB_NAME}



or if io :


https://gist.githubusercontent.com/Guessing/0b1bcef7f100061d914f/raw/360e830411c87feaa94995685a7ffed79509cfb2/build_and_push_io.sh

####################################

- Apply and save.


2. Add your slave job :


- Create a new job, named by example “jenkins_docker_slave”.
- At “build periodically” you can add something.
- Add a shell script step.
- Copy the followings :

####################################


#!/bin/bash
 
docker run --name ${JOB_NAME} localhost:5000/docker_image_name 
 
# copy build artifacts out of the container
docker cp ${JOB_NAME}:/node-simple/Hello.java .
docker cp ${JOB_NAME}:/node-simple/Hello.class .
 
# remove the container
docker rm ${JOB_NAME}


####################################


Issues :


Failed to fork error :

vagrant ssh and then in sudo :

> dd if=/dev/zero of=/swapfile bs=1024 count=1024000
> mkswap /swapfile
> swapon /swapfile

or

add memory to jenkins by changing Vagrantfile


Jenkins docker file build : Normally port 5000 is not in use but /!\




